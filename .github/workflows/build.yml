name: nf-fuzzball CI
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      publish_release:
        description: 'Publish release (default: false)'
        required: true
        default: false
        type: boolean
      schema_versions:
        description: 'Fuzzball versions to build - Examples: "latest", "all", "v3.0", "v2.2,v3.0"'
        required: true
        default: 'latest'
        type: string

jobs:
  determine-matrix:
    name: Determine build matrix
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine which schemas to build
        id: set-matrix
        run: |
          # Find available schema versions and determine latest
          mapfile -t AVAILABLE_SCHEMAS < <(find code-generation/schemas/ -name 'fuzzball-v*-openapi.json' | sed 's/.*fuzzball-v\([^-]*\)-.*/v\1/' | sort -V)
          LATEST_SCHEMA="${AVAILABLE_SCHEMAS[-1]}"
          echo "Available schemas: ${AVAILABLE_SCHEMAS[*]}"
          echo "Latest schema detected: $LATEST_SCHEMA"

          #-- START manual_dispatch on tag --------------------------------------------------
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then

            INPUT_VERSIONS="${{ github.event.inputs.schema_versions }}"
            echo "Input versions: $INPUT_VERSIONS"

            if [[ "$INPUT_VERSIONS" == "all" ]]; then
              SELECTED_VERSIONS=( "${AVAILABLE_SCHEMAS[@]}" )
              echo "Building all available versions: ${SELECTED_VERSIONS[*]}"
            elif [[ "$INPUT_VERSIONS" = "latest" ]]; then
              SELECTED_VERSIONS=( "$LATEST_SCHEMA" )
              echo "Building latest version: ${SELECTED_VERSIONS[*]}"
            else
              # Parse comma-separated list and validate
              mapfile -t _VERSIONS < <( sed 's/,/\n/g' <<< "${INPUT_VERSIONS}" | tr -d " " )

              # Validate selected versions exist and construct matrix
              SELECTED_VERSIONS=()
              for version in "${_VERSIONS[@]}"; do
                # Check if version exists in available schemas array
                found=false
                for available in "${AVAILABLE_SCHEMAS[@]}"; do
                  if [[ "$available" == "$version" ]]; then
                    found=true
                    break
                  fi
                done
                if [[ "$found" == "true" ]]; then
                  SELECTED_VERSIONS+=( "$version" )
                else
                  echo "Warning: Schema version '$version' not found in available schemas: ${AVAILABLE_SCHEMAS[*]}" >&2
                  echo "Skipping invalid version: $version" >&2
                fi
              done
            fi

            # If no valid versions found, default to latest
            if [[ "${#SELECTED_VERSIONS[@]}" -eq 0 ]]; then
              echo "No valid versions found, defaulting to latest: $LATEST_SCHEMA" >&2
              SELECTED_VERSIONS+=( "$LATEST_SCHEMA" )
            fi

            echo "Manual build: building versions: ${SELECTED_VERSIONS[*]}"
          #-- END manual_dispatch on tag ----------------------------------------------------
          #-- START automatic dispatch ------------------------------------------------------
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            SELECTED_VERSIONS=( "${LATEST_SCHEMA}" )
            echo "PR build: using latest schema $LATEST_SCHEMA"
          elif [[ "${{ github.ref_type }}" = "tag" ]]; then
            SELECTED_VERSIONS=( "${LATEST_SCHEMA}" )
            echo "New tag build: using latest schema $LATEST_SCHEMA"
          else
            echo "Unknown event type"
            exit 1
          fi
          #-- END automatic dispatch --------------------------------------------------------

          # Output matrix in correct format for GitHub Actions
          echo "matrix=$(jq -cn '{"fuzzball_version": $ARGS.positional}' --args "${SELECTED_VERSIONS[@]}")" >> "$GITHUB_OUTPUT"

  build:
    name: Build nf-fuzzball
    needs: determine-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix: ${{fromJson(needs.determine-matrix.outputs.matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Set Fuzzball version and validate schema
        run: |
          FUZZBALL_VERSION="${{ matrix.fuzzball_version }}"
          SCHEMA_FILE="code-generation/schemas/fuzzball-${FUZZBALL_VERSION}-openapi.json"

          # Validate schema file exists
          if [[ ! -f "$SCHEMA_FILE" ]]; then
            echo "Error: Schema file $SCHEMA_FILE does not exist"
            exit 1
          fi

          echo "FUZZBALL_VERSION=$FUZZBALL_VERSION" >> "$GITHUB_ENV"
          echo "SCHEMA_FILE=$SCHEMA_FILE" >> "$GITHUB_ENV"
          echo "Building for Fuzzball version: $FUZZBALL_VERSION using $SCHEMA_FILE"

      - name: Set plugin version (starts with 'v')
        run: |
          # PLUGIN_VERSION always comes from gradle but we make sure it also starts with a v
          PLUGIN_VERSION="$(grep -E "version\s*=" build.gradle | head -1 | sed -E "s/.*version\s*=\s*'([^']+)'.*/\1/")"
          echo "PLUGIN_VERSION=v${PLUGIN_VERSION#v}" >> "$GITHUB_ENV"

      - name: Check plugin in build.gradle matches tag
        if: github.ref_type == 'tag'
        run: |
          PLUGIN_VERSION_TAG="${{ github.ref_name }}"
          PLUGIN_VERSION_GRADLE="${{ env.PLUGIN_VERSION }}"

          if [[ "${PLUGIN_VERSION_TAG#v}" != "${PLUGIN_VERSION_GRADLE#v}" ]]; then
            echo "Plugin version in build.gradle (${PLUGIN_VERSION_GRADLE#v}) does not match tag (${PLUGIN_VERSION_TAG#v})"
            exit 1
          else
            echo "Plugin version in build.gradle matches tag"
          fi

      - name: Setup Java 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          architecture: x64
          distribution: 'temurin'

      - name: Tests
        run: ./gradlew check -PopenapiFile="${{ env.SCHEMA_FILE }}"
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false'

      - name: Compile
        run: ./gradlew assemble -PopenapiFile="${{ env.SCHEMA_FILE }}"

      - name: Update name of build artifact
        run: |
          aname="nf-fuzzball-${{ env.PLUGIN_VERSION }}-stable-${{ matrix.fuzzball_version }}.zip"
          echo "Renaming build artifact to ${aname}"
          mv build/distributions/nf-fuzzball-*.zip "build/distributions/${aname}"
          echo "ARTIFACT_NAME=${aname}" >> "$GITHUB_ENV"

      - name: Create or update release and attach artifact
        if: github.ref_type == 'tag' && (github.event_name == 'push' || github.event.inputs.publish_release == 'true')
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ env.PLUGIN_VERSION }}
          tag: ${{ env.PLUGIN_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: "build/distributions/${{ env.ARTIFACT_NAME }}"
          artifactContentType: "application/zip"
